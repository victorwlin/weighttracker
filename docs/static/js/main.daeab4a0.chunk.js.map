{"version":3,"sources":["components/Input.js","components/Weights.js","components/App.js","index.js"],"names":["Input","state","entry","date","weight","componentDidMount","today","Date","toISOString","substring","setState","onDateChange","event","target","value","onWeightChange","onFormSubmit","preventDefault","props","onSubmit","window","alert","className","this","type","onChange","step","onClick","React","Component","Weights","entries","sort","a","b","comparison","style","backgroundColor","color","map","key","data-label","Math","round","toFixed","App","onEntrySubmit","doesDateHaveEntry","i","length","prevState","el","marginTop","ReactDOM","render","document","querySelector"],"mappings":"oMAwEeA,E,4MAnEXC,MAAQ,CAAEC,MAAO,CAAEC,KAAM,GAAIC,OAAQ,K,EAGrCC,kBAAoB,WAChB,IACMC,GADO,IAAIC,MACEC,cAAcC,UAAU,EAAG,IAE9C,EAAKC,SAAS,CAAER,MAAM,eAAM,EAAKD,MAAMC,MAAlB,CAAyBC,KAAMG,O,EAOxDK,aAAe,SAAAC,GACX,EAAKF,SAAS,CAAER,MAAM,eAAM,EAAKD,MAAMC,MAAlB,CAAyBC,KAAMS,EAAMC,OAAOC,W,EAGrEC,eAAiB,SAAAH,GACb,EAAKF,SAAS,CAAER,MAAM,eAAM,EAAKD,MAAMC,MAAlB,CAAyBE,OAAQQ,EAAMC,OAAOC,W,EAMvEE,aAAe,SAAAJ,GAGXA,EAAMK,iBAGF,EAAKhB,MAAMC,MAAMC,MACjB,EAAKe,MAAMC,SAAX,eAAwB,EAAKlB,MAAMC,QACnC,EAAKQ,SAAS,CAAER,MAAO,CAAEC,KAAM,GAAIC,OAAQ,OAE3CgB,OAAOC,MAAM,wB,uDAKjB,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,UACX,0BAAMH,SAAUI,KAAKP,aAAcM,UAAU,SACzC,uCACA,2BACIE,KAAK,OACLV,MAAOS,KAAKtB,MAAMC,MAAMC,KACxBsB,SAAUF,KAAKZ,gBAGvB,0BAAMQ,SAAUI,KAAKP,aAAcM,UAAU,SACzC,yCACA,2BACIE,KAAK,SACLE,KAAK,OACLZ,MAAOS,KAAKtB,MAAMC,MAAME,OACxBqB,SAAUF,KAAKR,mBAI3B,yBAAKY,QAASJ,KAAKP,aAAcM,UAAU,oBAA3C,e,GAhEIM,IAAMC,WCiCXC,EAjCC,SAAAZ,GAaZ,OAFAA,EAAMa,QAAQC,MAVd,SAAiBC,EAAGC,GAChB,IAAIC,EAAa,EAMjB,OALIF,EAAE9B,KAAO+B,EAAE/B,KACXgC,EAAa,EACNF,EAAE9B,KAAO+B,EAAE/B,OAClBgC,GAAc,GAEXA,KAMP,2BAAOb,UAAU,mBACb,+BAAO,4BACH,wBAAIc,MAAO,CAACC,gBAAiB,UAAWC,MAAM,UAA9C,QACA,wBAAIF,MAAO,CAACC,gBAAiB,UAAWC,MAAM,UAA9C,YAEJ,+BACKpB,EAAMa,QAAQQ,KAAI,SAAArC,GACf,OACI,wBAAIsC,IAAKtC,EAAMC,MACX,wBAAIsC,aAAW,QAAQvC,EAAMC,MAC7B,wBAAIsC,aAAW,WAAWC,KAAKC,MAAqB,IAAfzC,EAAME,QAAgB,KAAKwC,QAAQ,WCmBrFC,E,4MArCX5C,MAAQ,CAAE8B,QAAS,I,EAEnBe,cAAgB,SAAA5C,GAEZ,IADA,IAAI6C,EAAoB,EACfC,EAAI,EAAGA,EAAI,EAAK/C,MAAM8B,QAAQkB,OAAQD,IACvC9C,EAAMC,OAAS,EAAKF,MAAM8B,QAAQiB,GAAG7C,MACrC4C,IAIJA,EACA,EAAKrC,UAAS,SAAAwC,GACV,MAAO,CACHnB,QAASmB,EAAUnB,QAAQQ,KACvB,SAAAY,GAAE,OAAIA,EAAGhD,OAASD,EAAMC,KAAlB,eAA8BgD,EAA9B,CAAkC/C,OAAQF,EAAME,SAAW+C,SAI7E,EAAKzC,UAAS,SAAAwC,GACV,MAAO,CACHnB,QAAQ,GAAD,mBAAMmB,EAAUnB,SAAhB,CAAyB7B,S,uDAO5C,OACI,yBAAKoB,UAAU,eAAec,MAAO,CAAEgB,UAAW,SAC9C,8CACA,kBAAC,EAAD,CAAOjC,SAAUI,KAAKuB,gBACtB,kBAAC,EAAD,CAASf,QAASR,KAAKtB,MAAM8B,e,GAlC3BH,IAAMC,WCAxBwB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.daeab4a0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Input extends React.Component {\r\n    // I am initializing state with a object, because I want the dates\r\n    // and weights to be locked together.\r\n    state = { entry: { date: \"\", weight: \"\" } };\r\n\r\n    // Calculate today's date and set to default in the form\r\n    componentDidMount = () => {\r\n        const date = new Date();\r\n        const today = date.toISOString().substring(0, 10);\r\n\r\n        this.setState({ entry: { ...this.state.entry, date: today } });\r\n    };\r\n\r\n    // React does not allow me to update a specific property with setState\r\n    // I had to create onDateChange and onWeightChange in order to modify\r\n    // a specific property in my state object without affecting the other\r\n    // property\r\n    onDateChange = event => {\r\n        this.setState({ entry: { ...this.state.entry, date: event.target.value } });\r\n    };\r\n\r\n    onWeightChange = event => {\r\n        this.setState({ entry: { ...this.state.entry, weight: event.target.value } });\r\n    };\r\n\r\n\r\n    // This method passes the Input (child) state into the App (parent)\r\n    // state\r\n    onFormSubmit = event => {\r\n        // This prevents the page from refreshing every time something is\r\n        // submitted\r\n        event.preventDefault();\r\n        \r\n        // Check if date field is empty\r\n        if (this.state.entry.date) {\r\n            this.props.onSubmit({...this.state.entry});\r\n            this.setState({ entry: { date: \"\", weight: \"\" } });\r\n        } else {\r\n            window.alert(\"Please enter a date\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui form\">\r\n                <div className=\"fields\">\r\n                    <form onSubmit={this.onFormSubmit} className=\"field\">\r\n                        <label>Date</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={this.state.entry.date}\r\n                            onChange={this.onDateChange}\r\n                        />\r\n                    </form>\r\n                    <form onSubmit={this.onFormSubmit} className=\"field\">\r\n                        <label>Weight</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            step=\"0.01\"\r\n                            value={this.state.entry.weight}\r\n                            onChange={this.onWeightChange}\r\n                        />\r\n                    </form>\r\n                </div>\r\n                <div onClick={this.onFormSubmit} className=\"ui submit button\">Submit</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\nconst Weights = props => {    \r\n    function compare(a, b) {\r\n        let comparison = 0;\r\n        if (a.date > b.date) {\r\n            comparison = 1;\r\n        } else if (a.date < b.date) {\r\n            comparison = -1;\r\n        }\r\n        return comparison;\r\n    }\r\n\r\n    props.entries.sort(compare);\r\n\r\n    return (\r\n        <table className=\"ui celled table\">\r\n            <thead><tr>\r\n                <th style={{backgroundColor: \"#118ab2\", color:\"white\"}}>Date</th>\r\n                <th style={{backgroundColor: \"#118ab2\", color:\"white\"}}>Weight</th>\r\n            </tr></thead>\r\n            <tbody>\r\n                {props.entries.map(entry => {\r\n                    return (\r\n                        <tr key={entry.date}>\r\n                            <td data-label=\"Date\">{entry.date}</td>\r\n                            <td data-label=\"Weight\">{(Math.round(entry.weight * 100) / 100).toFixed(2)}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Weights;","import React from \"react\";\r\n\r\nimport Input from \"./Input\";\r\nimport Weights from \"./Weights\";\r\n\r\nclass App extends React.Component {\r\n    // The purpose of the App file is to store a collection of entries\r\n    // for the Weights file to render\r\n    state = { entries: [] };\r\n    \r\n    onEntrySubmit = entry => {\r\n        let doesDateHaveEntry = 0;\r\n        for (let i = 0; i < this.state.entries.length; i++) {\r\n            if (entry.date === this.state.entries[i].date) {\r\n                doesDateHaveEntry++;\r\n            }\r\n        }\r\n\r\n        if (doesDateHaveEntry) {\r\n            this.setState(prevState => {\r\n                return {\r\n                    entries: prevState.entries.map(\r\n                        el => el.date === entry.date ? { ...el, weight: entry.weight } : el\r\n                )}\r\n            })\r\n        } else {\r\n            this.setState(prevState => {\r\n                return {\r\n                    entries: [...prevState.entries, entry]\r\n                };\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui container\" style={{ marginTop: \"10px\" }}>\r\n                <h1>Weight Tracker</h1>\r\n                <Input onSubmit={this.onEntrySubmit} />\r\n                <Weights entries={this.state.entries} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}